<section
  class="ball absolute z-[1] top-0 left-0 m-36 w-[25%] aspect-square blur-3xl flex-center [&>div>i]:absolute [&>div>i]:w-full [&>div>i]:h-full"
>
  <div class="w-full h-full relative">
    <i
      class="opacity-10 animate-[spin_30s_linear_infinite] bg-gradient-to-r from-cyan-500 to-blue-500 rounded-[49%_51%_52%_48%_/_75%_30%_70%_25%]"
    ></i>
    <i
      class="opacity-10 animate-[spin_40s_linear_reverse_infinite] bg-gradient-to-r from-purple-500 to-pink-900 rounded-[39%_61%_13%_87%_/_5%_30%_70%_95%]"
    ></i>
    <i
      class="opacity-10 animate-[spin_50s_linear_infinite] bg-gradient-to-r from-indigo-500 to-sky-500 rounded-[86%_14%_13%_87%_/_77%_25%_75%_23%]"
    ></i>
  </div>
</section>

<style>
  .ball {
    --x: 50;
    --y: 50;

    width: 25vw;
    height: 25vw;
    left: calc(var(--x) * 1vw);
    top: calc(var(--y) * 1vh);
    position: absolute;
    animation: move 5s infinite;
    transform: translate(-50%, -50%);
  }
</style>
<script>
  const INITIAL_VELOCITY = 0.0025;

  export default class Ball {
    constructor(ballElem) {
      //@ts-ignore
      this.ballElem = ballElem;
      this.reset();
    }

    get x() {
      return parseFloat(
        //@ts-ignore
        getComputedStyle(this.ballElem).getPropertyValue("--x")
      );
    }

    set x(value) {
      //@ts-ignore
      this.ballElem.style.setProperty("--x", value);
    }

    get y() {
      return parseFloat(
        //@ts-ignore
        getComputedStyle(this.ballElem).getPropertyValue("--y")
      );
    }

    set y(value) {
      //@ts-ignore
      this.ballElem.style.setProperty("--y", value);
    }

    rect() {
      //@ts-ignore
      return this.ballElem.getBoundingClientRect();
    }

    reset() {
      this.x = randomNumberBetween(1, 100);
      this.y = randomNumberBetween(1, 100);
      //@ts-ignore
      this.direction = { x: 0 };
      while (
        //@ts-ignore
        Math.abs(this.direction.x) <= 0.2 ||
        //@ts-ignore
        Math.abs(this.direction.x) >= 0.9
      ) {
        const heading = randomNumberBetween(0, 2 * Math.PI);
        //@ts-ignore
        this.direction = { x: Math.cos(heading), y: Math.sin(heading) };
      }
      //@ts-ignore
      this.velocity = INITIAL_VELOCITY;
    }

    update(delta, paddleRects) {
      //@ts-ignore
      this.x += this.direction.x * this.velocity * delta;
      //@ts-ignore
      this.y += this.direction.y * this.velocity * delta;

      const rect = this.rect();

      if (rect.bottom >= window.innerHeight - 5 || rect.top <= 0) {
        //@ts-ignore
        this.direction.y *= -1;
      }

      if (rect.right >= window.innerWidth - 5 || rect.left <= 0) {
        //@ts-ignore
        this.direction.x *= -1;
      }
    }
  }

  function randomNumberBetween(min, max) {
    return Math.random() * (max - min) + min;
  }

  document.querySelectorAll(".ball").forEach((ballEl) => {
    const ball = new Ball(ballEl);

    let lastTime;

    function update(time) {
      if (lastTime) {
        const delta = time - lastTime;
        //@ts-ignore
        ball.update(delta);
      }
      lastTime = time;
      window.requestAnimationFrame(update);
    }

    window.requestAnimationFrame(update);
  });
</script>
