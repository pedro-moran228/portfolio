<section
  id="slider-lrs"
  class="relative h-auto container-sm rounded-2xl shadow-[0px_0px_40px_10px_#0000006e]"
>
  <div
    id="carousel-container"
    class={`
      w-full h-auto relative overflow-hidden rounded-2xl 
      [&>img]:transition-transform 
      [&>img]:duration-500 
      group
      after:content-[''] 
      after:absolute
      after:top-0 
      after:left-0 
      after:w-full 
      after:h-full
      after:opacity-0
      hover:after:opacity-100
      after:bg-[linear-gradient(90deg,_rgba(10,_27,_59,_0.45),_rgba(255,0,0,0)_10%),linear-gradient(-90deg,_rgba(10,_27,_59,_0.45),_rgba(255,0,0,0)_10%);] 
      after:duration-200
    `}
  >
    <ul id="carousel" class="w-[5000px] p-0 m-0 flex animate">
      <li datat-slide="1" class="h-auto slide animate">
        <img src="LRS/LRS_1.png" />
      </li>
      <li datat-slide="2" class="h-auto slide animate">
        <img src="LRS/LRS_2.png" />
      </li>
      <li datat-slide="3" class="h-auto slide animate">
        <img src="LRS/LRS_3.png" />
      </li>
      <li datat-slide="4" class="h-auto slide animate">
        <img src="LRS/LRS_4.png" />
      </li>
    </ul>
    <button
      id="prev"
      class="left-0 hidden h-full absolute z-20 top-1/2 -translate-y-1/2 w-[70px] flex-center group-hover:flex hover:scale-125 duration-100"
      ><svg
        stroke="#FFF"
        fill="#FFF"
        class="rotate-180 transform group-hover:scale-125 transition-transform duration-100"
        viewBox="0 0 1024 1024"
        height="20px"
        width="20px"
        xmlns="http://www.w3.org/2000/svg"
        ><path
          d="M271.653 1023.192c-8.685 0-17.573-3.432-24.238-10.097-13.33-13.33-13.33-35.144 0-48.474L703.67 508.163 254.08 58.573c-13.33-13.331-13.33-35.145 0-48.475 13.33-13.33 35.143-13.33 48.473 0L776.38 483.925c13.33 13.33 13.33 35.143 0 48.473l-480.492 480.694c-6.665 6.665-15.551 10.099-24.236 10.099z"
        ></path></svg
      ></button
    >
    <button
      id="next"
      class="right-0 hidden h-full absolute z-20 top-1/2 -translate-y-1/2 w-[70px] flex-center group-hover:flex hover:scale-125 duration-100"
      ><svg
        stroke="#FFF"
        fill="#FFF"
        class="transform group-hover:scale-125 transition-transform duration-100"
        viewBox="0 0 1024 1024"
        height="20px"
        width="20px"
        xmlns="http://www.w3.org/2000/svg"
        ><path
          d="M271.653 1023.192c-8.685 0-17.573-3.432-24.238-10.097-13.33-13.33-13.33-35.144 0-48.474L703.67 508.163 254.08 58.573c-13.33-13.331-13.33-35.145 0-48.475 13.33-13.33 35.143-13.33 48.473 0L776.38 483.925c13.33 13.33 13.33 35.143 0 48.473l-480.492 480.694c-6.665 6.665-15.551 10.099-24.236 10.099z"
        ></path></svg
      ></button
    >
  </div>
</section>

<style>
  .animate {
    -webkit-transition-duration: 0.5s;
    -moz-transition-duration: 0.5s;
    -o-transition-duration: 0.5s;
    transition-duration: 0.5s;
    -webkit-transition-property: -webkit-transform;
    -moz-transition-property: -moz-transform;
    -o-transition-property: -o-transform;
    transition-property: transform;
  }
</style>

<script>
  let index = 0,
    amount = 0,
    currTransl: number[] = [],
    translationComplete = true,
    moveOffset = 0;

  const carousel = document.getElementById("carousel") as HTMLElement;
  const carouselContainer = document.getElementById(
    "carousel-container"
  ) as HTMLElement;

  const transitionCompleted = function () {
    translationComplete = true;
  };

  const btnPrev = document.getElementById("prev") as HTMLButtonElement;
  const btnNext = document.getElementById("next") as HTMLButtonElement;

  document.addEventListener("DOMContentLoaded", function (event) {
    amount = document.getElementsByClassName("slide").length;
    moveOffset = carouselContainer.offsetWidth;

    // calcuate the width of the carousel
    carousel.style.width = amount * moveOffset + "px";

    // prevent multiple click when transition
    for (var i = 0; i < amount; i++) {
      currTransl[i] = -moveOffset;

      const currSlide = document.getElementsByClassName("slide")[i];

      currSlide.addEventListener("transitionend", transitionCompleted, true);
      currSlide.addEventListener(
        "webkitTransitionEnd",
        transitionCompleted,
        true
      );
      currSlide.addEventListener("oTransitionEnd", transitionCompleted, true);
      currSlide.addEventListener("MSTransitionEnd", transitionCompleted, true);
    }

    const firstSlide = carousel.firstChild as HTMLElement;
    const firstSlideImgHeight = (firstSlide.firstChild as HTMLElement)
      .offsetHeight;

    carousel.style.height = firstSlideImgHeight + "px";

    [...carousel.children].forEach((child) => {
      const slide = child as HTMLElement;
      slide.style.height = carouselContainer.offsetHeight + "px";
      slide.style.margin = "0";
      (slide.firstChild as HTMLElement).style.objectFit = "cover";
      slide.style.transform = `translateX(-${moveOffset}px)`;
    });

    const firstElement = carousel.firstChild as ChildNode;
    const lastElement = carousel.lastChild as ChildNode;
    // add the last item to the start so that translateX(-moveOffset) works (In case the first click is the previous button)
    carousel.insertBefore(lastElement, firstElement);

    // add click events to control arrows
    btnPrev.addEventListener("click", prev, true);
    btnNext.addEventListener("click", next, true);
  });

  function prev() {
    if (!translationComplete) return;

    translationComplete = false;
    index--;

    if (index == -1) {
      index = amount - 1;
    }

    const outerIndex = index % amount;
    for (let i = 0; i < amount; i++) {
      const slide = document.getElementsByClassName("slide")[i] as HTMLElement;
      slide.style.opacity = "1";
      slide.style.transform =
        "translateX(" + (currTransl[i] + moveOffset) + "px)";
      currTransl[i] = currTransl[i] + moveOffset;
    }

    const outerSlide = document.getElementsByClassName("slide")[
      outerIndex
    ] as HTMLElement;
    outerSlide.style.transform =
      "translateX(" + (currTransl[outerIndex] - moveOffset * amount) + "px)";
    outerSlide.style.opacity = "0";
    currTransl[outerIndex] = currTransl[outerIndex] - moveOffset * amount;
  }

  function next() {
    console.log("next");
    if (!translationComplete) return;

    translationComplete = false;

    const outerIndex = index % amount;
    index++;

    for (var i = 0; i < amount; i++) {
      const slide = document.getElementsByClassName("slide")[i] as HTMLElement;

      slide.style.opacity = "1";
      slide.style.transform =
        "translateX(" + (currTransl[i] - moveOffset) + "px)";
      currTransl[i] = currTransl[i] - moveOffset;
    }

    const outerSlide = document.getElementsByClassName("slide")[
      outerIndex
    ] as HTMLElement;

    outerSlide.style.transform =
      "translateX(" + (currTransl[outerIndex] + moveOffset * amount) + "px)";
    outerSlide.style.opacity = "0";
    currTransl[outerIndex] = currTransl[outerIndex] + moveOffset * amount;
  }
</script>
